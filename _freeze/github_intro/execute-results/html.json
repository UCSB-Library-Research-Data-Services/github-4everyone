{
  "hash": "0d039378db76cb5f04ef697d2edc9b22",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"git and GitHub\"\n---\n\n\n# Version Control with `git` and `GitHub`\n\nAka  --  **Say goodbye to  `script_JB_03v5b.R` !!**\n\n\n## The problem with `save_as`\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](img/phd_comics_final.png){fig-align='center' width=80%}\n:::\n:::\n\n\nEvery file in the scientific process changes.  Manuscripts are edited. Figures get revised.  Code gets fixed when problems are discovered.  Data files get combined together, then errors are fixed, and then they are split and combined again. In the course of a single analysis, one can expect thousands of changes to files.  And yet, all we use to track this are simplistic *filenames*.  You might think there is a better way, and you'd be right: __version control__.\n\nVersion control systems help you track all of the changes to your files, without the spaghetti mess that ensues from simple file renaming.  In other words, version control is a system that helps you to manage the different versions of your files in an organized manner. It will help you to never have to duplicate files using `save as` as a way to keep different versions of a file (see below). Version control helps you to develop a timeline of snapshots containing the different versions of a file. At any point in time, you will be able to roll back to a specific version. Bonus: you can add a short description (commit message) to remember what each specific version is about.\n\n**What is the difference between `git` and `GitHub`?**\n\n- __git__: is a version control software used to track files in a folder (a repository)\n    - git creates a timeline or history of your files\n- __GitHub__: is a code repository in the cloud that enables users to store their git repositories and share them with others. Github also adds many features to manage projects and document your work.\n\n\n## git\n\n <img style=\"float: right;width: 100px;\" src=\"img/git_icon.png\">\n\nThis section focuses on the code versioning system called `Git`. Note that there are others, such as `Mercurial` or `svn` for example.\n\nGit is a *free* and *open source* distributed *version control system*. It has many functionalities and was originally geared towards software development and production environment. In fact, Git was initially designed and developed in 2005 by Linux kernel developers (including Linus Torvalds) to track the development of the Linux kernel. Here is a [fun video](https://www.youtube.com/watch?v=4XpnKHJAok8) of Linus Torvalds touting Git to Google. \n\n**How does it work?**\n\nGit can be enabled on a specific folder/directory on your file system to version files within that directory (including sub-directories). In git (and other version control systems) terms, this “tracked folder” is called a **repository** (which formally is a specific data structure storing versioning information).\n\n**What git is not:**\n\n- **Git is not a backup per se**\n- Git is not good at versioning large files (there are workarounds) => not meant for large data\n\n::: {.callout-note collapse=true}\n### Fun fact\n\nGit was initially designed and developed by Linux kernel developers (including Linus Torvalds) to track the development of the Linux kernel in 2005. Here is a [fun video](https://www.youtube.com/watch?v=4XpnKHJAok8) of Linus Torvalds touting Git to Google engineers. \n:::\n\n### Repository\n\nGit can be enabled on a specific folder/directory on your file system to version files within that directory (including sub-directories). In git (and other version control systems) terms, this “tracked folder” is called a **repository** (which formally is a specific data structure storing versioning information).\n\nAlthough there are many ways to start a new repository, [GitHub](https://github.com/) (or any other cloud solutions, such as [GitLab](https://about.gitlab.com/)) provide among the most convenient way of starting a repository.\n\n<img style=\"float: right;width: 100px;\" src=\"img/github-logo.png\">\n\n\n## GitHub  \n\t\n**GitHub is a company that hosts git repositories online** and provides several collaboration features (among which `forking`). GitHub fosters a great user community and has built a nice web interface to git, also adding great visualization/rendering capacities of your data. It is like a coding social platform for ~~nerds~~  ALL \n\nA few highlights of what you can do with GitHub:\n\n- Publish and share your work (like the website we are using today!!)\n- Visualize your files and modifications  (highlight changes in your code; can render files such as csv, png, …)\n- Manage projects and tasks (GitHub issues)\n- Uses the markdown syntax everywhere (like Rmarkdown, quarto, and Jupyter notebooks!)\n\n\n\n### GitHub Dashboard\n\nThis is the default landing page when you log into your account. It provides a mix of the most recent resources and activities of your and your collaborators' actions, as well as some resources relevant to your work. The dashboard therefore changes on a regular basis. Once logged in, you can access your dashboard at <https://github.com>\n\n![](img/github_overview-01_dashboard.png)\n\n\n### GtiHub User page\n\nThis page can be reached using with the following URL: https://github.com/`username`. For my user (`brunj7`) it would be: <https://github.com/brunj7>. It is a great space for you to provide some information about yourself and the main repositories you are working on. It also lists the GitHub Organizations you are part of. But more importantly, Users own repositories to host and share their code. You can list repositories from a User by clicking on the _repositories_ tab in the main GitHub menu bar at the top.\n\n![](img/github_overview-02_user.png)\n\n\n### GtiHub Organization page\n\nWe will talk more about GitHub Organizations later. In a nutshell, organizations are like groups or teams that users can be members of. Like Users, Organizations can have a landing page and own repositories. However, they add several perks in terms of user management. Similarly to Users, you can access repositories from an Organization by clicking on the _repositories_ tab in the main GitHub menu bar at the top. You can access an organization's page similarly to a user: https://github.com/`organization-name`; e.g.  <https://github.com/UCSB-Library-Research-Data-Services>\n\n\n![](img/github_overview-03_organization.png){fig-align=\"center\" width=90%}\n\n\n### Let's look at a repository on GitHub\n\nThis screen shows the copy of a repository stored on GitHub,\nwith its <span style=\"color:red\">list of files</span>, <span style=\"color:green\">when the files and directories were last modified</span>, \nand <span style=\"color:blue\">some information on who made the most recent changes.</span>  \n\n![](img/ss3sim-github_colored.png){fig-align=\"center\" width=80%}\n\nIf we drill into the \n\"<span style=\"color:orange\">commits</span>\" for the repository, we can see the history of changes made to all of \nthe files.  Looks like `kellijohnson` and `seananderson` were fixing things in\nJune and July:\n\n![](img/ss3sim-commits_colored.png){fig-align=\"center\" width=80%}\n\nAnd finally, if we drill into the changes made on June 13, we can see exactly what\nwas changed in each file:\n\n![](img/ss3sim-diff.png){fig-align=\"center\" width=80%}\n\nTracking these changes, and seeing how they relate to released versions of software and files\nis exactly what Git and GitHub are good for. We will show how they can really \nbe effective for tracking versions of scientific code, figures, and manuscripts\nto accomplish a reproducible workflow.\n\n\n## Recap\n\n- **GitHub.com / your dashboard (if logged in)**: <https://github.com>\n- **A user account**: <https://github.com/brunj7>\n- **An organization account**: <https://github.com/UCSB-Library-Research-Data-Services>\n\n\n## Recommended reading\n\nBraga PHP, Hébert K, Hudgins EJ, Scott ER, Edwards BPM, Sánchez Reyes LL, et al. _Not just for programmers: How GitHub can accelerate collaborative and reproducible research in ecology and evolution._ Methods in Ecology and Evolution. 2023;14: 1364–1380. [doi:10.1111/2041-210X.14108](https://doi.org/10.1111/2041-210X.14108)\n\n\n\n## Aknowledgements\n\nThis materials was adapted from [NCEAS Reproducible Research Techniques for Synthesis](https://learning.nceas.ucsb.edu/2021-02-RRCourse/index.html) & [Collaborative Coding with GitHub. LNO Scientific Computing Team](https://github.com/NCEAS/scicomp-workshop-collaborative-coding).\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}