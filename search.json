[
  {
    "objectID": "handson_github_website.html",
    "href": "handson_github_website.html",
    "title": "Using the GitHub website",
    "section": "",
    "text": "In this section, we will be using the GitHub.com website and demonstrate that you do not need to be a programmer to use version control and edit files on GitHub."
  },
  {
    "objectID": "handson_github_website.html#collaborator-workflow",
    "href": "handson_github_website.html#collaborator-workflow",
    "title": "Using the GitHub website",
    "section": "Collaborator Workflow",
    "text": "Collaborator Workflow\n\n\n\n\n\n\nOur asks\n\n\n\n\nAs a Team of two\n\nHelp each other, everyone is bringing different skills! Talk it out!\nListen to each other; avoid judgment and solutioneering.\nHave fun!\n\n\n\nPrompt\nWe want to log the information about people’s favorite desserts using a repository.\n\n\n\n\nPerson 1 (owner):\n\nCreate a repository using the following instructions steps 1-6\n\n\n\nEdit the README to:\n\nReplace the title (first line starting with #) with something better! Maybe Favorite Desserts\nAdd your name and your favorite dessert below the title: e.g. - Julien: crepes\n\n\n\n\n\n\n\n\n\n\n\n\nAdd Person 2 as a collaborator following these instructions\n\n\n\nPerson 2 (collaborator):\n\nCheck your email to accept the invitation\nGo to the repository website (link is provided in the invitation)\nStart editing the README.md by clicking on the pen at the top of the README.md file to edit it\n\n\n\n\n\n\n\n\n\n\n\nAdd your name and your favorite dessert below the title: e.g. - Sophia: chocolate\nClick Commit changes\nAdd a descriptive commit message, “add my favorite dessert”\n\n\n\n\n\n\n\n\n\n\n\nClick Commit changes to confirm\n\n\n\n\n\n\n\n\n\n\n\n\nPerson 1: add a csv file\nDownload this csv file about your favorite desserts to your computer. Note: depending on your web browser settings you might have to right-click on the page and select Save As.\n\nDrag and drop it on the Github web page of your repository to upload it\nAdd a short message about the file e.g. Add iconic_desserts.csv & hit Commit changes\nYour have has been uploaded. Click on the filename to see it!\n\nYou should have something similar to this repo: https://github.com/brunj7/favorite-desserts\n\n\nPerson 2: add an R script\nThis is the script we used to scrape the iconic desserts listing:\n\nlibrary(tidyverse)\nlibrary(rvest)  # use to scrape website content\n\n# Check if that data folder exists and create it if not\ndir.create(\"data\", showWarnings = FALSE)\n\n# Read the webpage code\nwebpage &lt;- read_html(\"https://www.eatthis.com/iconic-desserts-united-states/\")\n\n# Extract the desserts listing\ndessert_elements&lt;- html_elements(webpage, \"h2\")\ndessert_listing &lt;- dessert_elements %&gt;% \n  html_text2() %&gt;%             # extracting the text associated with this type of element of the webpage\n  as_tibble() %&gt;%              # make it a data frame\n  rename(dessert = value) %&gt;%  # better name for the column\n  head(.,-3) %&gt;%               # 3 last ones were not desserts \n  rowid_to_column(\"rank\") %&gt;%  # adding a column using the row number as proxy for the rank\n  write_csv(\"data/iconic_desserts.csv\") # save it as csv\n\nHow would you add this code as an R Script to your repository?\n\n\nBonus\nPerson 2: Try to edit the csv file directly on GitHub!\nPerson 1: Your turn!\nNo need to be a programmer to contribute to analytical workflows with GitHub!!\n\n\n\nFork Workflow\nIf you want to contribute to a repository that you have not been added to as a collaborator, you need to first fork the repository. This creates a linked copy under your username that you can edit. Once you are done with your contribution, you can send a request to incorporate your changes to the original repository using what is called a Pull Request, in other words, you ask the repository owner to pull your changes into their repository.\n\n\n\n\n\n\nOur ask\n\n\n\nPrompt\nWith another collaborator keep logging information about people’s favorite desserts using the fork workflow.\n\n\n\nPerson 2: Create a Fork of the person 1 repository\n\nGet the link the repository from Person 1 via the Zoom chat\nGo to their repository webpage\nCreate a Fork by clicking on the Fork button on the top right view of your repository homepage\n\n\n\n\n\n\n\n\n\n\n\nOn your Fork, start editing the README.md\nAdd the name of a friend and their favorite dessert below your previous entries: e.g. - Eliott: donut\nAdd a descriptive commit message\n\n\n\n\n\n\n\n\n\n\n\nCommit your changes\n\n\n\n\n\n\n\n\n\n\n\nCreate a Pull Request (PR) to merge those changes to the main repository using these instructions\n\n\n\nPerson 1:\n\nGo to your repository and merge the PR"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "GitHub for Everyone",
    "section": "",
    "text": "This workshop is part of the UC Love Data Week (LDW) 2024. During this 1h session we will explore the features of the GitHub website to manage and version content as a team. We will go over how to create a repository, edit files, and leverage the markdown syntax for documenting and tracking your work. We will also demonstrate how to invite collaborators. Participating in this workshop requires no coding skills or pre-installs (including the hands-on session). Everything will be done from your web browser!"
  },
  {
    "objectID": "index.html#learning-outcomes",
    "href": "index.html#learning-outcomes",
    "title": "GitHub for Everyone",
    "section": "Learning Outcomes",
    "text": "Learning Outcomes\n\nHave a better knowledge of version control\nHave a better grasp of what how you can collaborate using the GitHub website\nWanting to know more about git and GitHub, it’s a journey we hop you’ll start yours!!!"
  },
  {
    "objectID": "git_further_readings.html",
    "href": "git_further_readings.html",
    "title": "Further readings",
    "section": "",
    "text": "Jenny Bryan Happy git with R http://happygitwithr.com/\nIntro to GitHub and using git from RStudio GUI: http://ohi-science.org/data-science-training/collaborating.html\nIntro to git and Github using the command line: https://nceas.github.io/oss-lessons/version-control/1-git-basics.html\nTry git in 15min: https://try.github.io/levels/1/challenges/1\nGit terminology: https://www.atlassian.com/git/glossary/terminology\ngit rebase https://www.atlassian.com/git/tutorials/rewriting-history/git-rebase"
  },
  {
    "objectID": "git_further_readings.html#git-general-introduction",
    "href": "git_further_readings.html#git-general-introduction",
    "title": "Further readings",
    "section": "",
    "text": "Jenny Bryan Happy git with R http://happygitwithr.com/\nIntro to GitHub and using git from RStudio GUI: http://ohi-science.org/data-science-training/collaborating.html\nIntro to git and Github using the command line: https://nceas.github.io/oss-lessons/version-control/1-git-basics.html\nTry git in 15min: https://try.github.io/levels/1/challenges/1\nGit terminology: https://www.atlassian.com/git/glossary/terminology\ngit rebase https://www.atlassian.com/git/tutorials/rewriting-history/git-rebase"
  },
  {
    "objectID": "git_further_readings.html#git-workflows",
    "href": "git_further_readings.html#git-workflows",
    "title": "Further readings",
    "section": "Git workflows",
    "text": "Git workflows\n\nComparing workflow: https://www.atlassian.com/git/tutorials/comparing-workflows\nForking vs branching: https://stackoverflow.com/questions/3611256/forking-vs-branching-in-github\nDevelopment workflow: https://github.com/sevntu-checkstyle/sevntu.checkstyle/wiki/Development-workflow-with-Git:-Fork,-Branching,-Commits,-and-Pull-Request"
  },
  {
    "objectID": "git_further_readings.html#branches",
    "href": "git_further_readings.html#branches",
    "title": "Further readings",
    "section": "Branches",
    "text": "Branches\n\nInteractive tutorial to learn more about git branches and more https://learngitbranching.js.org/"
  },
  {
    "objectID": "git_further_readings.html#undoing-things",
    "href": "git_further_readings.html#undoing-things",
    "title": "Further readings",
    "section": "Undoing things",
    "text": "Undoing things\n\nHelp to decide how to undo your problem: http://justinhileman.info/article/git-pretty/git-pretty.png\nUndo almost everything with git https://blog.github.com/2015-06-08-how-to-undo-almost-anything-with-git/\nDifference between git reset soft, mixed and hard https://davidzych.com/difference-between-git-reset-soft-mixed-and-hard/\nResetting, Checking Out & Reverting https://www.atlassian.com/git/tutorials/resetting-checking-out-and-reverting"
  },
  {
    "objectID": "github_intro.html",
    "href": "github_intro.html",
    "title": "git and GitHub",
    "section": "",
    "text": "Aka – Say goodbye to script_JB_03v5b.R !!\n\n\n\n\n\n\n\n\n\n\n\nEvery file in the scientific process changes. Manuscripts are edited. Figures get revised. Code gets fixed when problems are discovered. Data files get combined together, then errors are fixed, and then they are split and combined again. In the course of a single analysis, one can expect thousands of changes to files. And yet, all we use to track this are simplistic filenames. You might think there is a better way, and you’d be right: version control.\nVersion control systems help you track all of the changes to your files, without the spaghetti mess that ensues from simple file renaming. In other words, version control is a system that helps you to manage the different versions of your files in an organized manner. It will help you to never have to duplicate files using save as as a way to keep different versions of a file (see below). Version control helps you to develop a timeline of snapshots containing the different versions of a file. At any point in time, you will be able to roll back to a specific version. Bonus: you can add a short description (commit message) to remember what each specific version is about.\nWhat is the difference between git and GitHub?\n\ngit: is a version control software used to track files in a folder (a repository)\n\ngit creates a timeline or history of your files\n\nGitHub: is a code repository in the cloud that enables users to store their git repositories and share them with others. Github also adds many features to manage projects and document your work.\n\n\n\n\n\nThis section focuses on the code versioning system called Git. Note that there are others, such as Mercurial or svn for example.\nGit is a free and open source distributed version control system. It has many functionalities and was originally geared towards software development and production environment. In fact, Git was initially designed and developed in 2005 by Linux kernel developers (including Linus Torvalds) to track the development of the Linux kernel. Here is a fun video of Linus Torvalds touting Git to Google.\nHow does it work?\nGit can be enabled on a specific folder/directory on your file system to version files within that directory (including sub-directories). In git (and other version control systems) terms, this “tracked folder” is called a repository (which formally is a specific data structure storing versioning information).\nWhat git is not:\n\nGit is not a backup per se\nGit is not good at versioning large files (there are workarounds) =&gt; not meant for large data\n\n\n\n\n\n\n\nFun fact\n\n\n\n\n\nGit was initially designed and developed by Linux kernel developers (including Linus Torvalds) to track the development of the Linux kernel in 2005. Here is a fun video of Linus Torvalds touting Git to Google engineers.\n\n\n\n\n\nGit can be enabled on a specific folder/directory on your file system to version files within that directory (including sub-directories). In git (and other version control systems) terms, this “tracked folder” is called a repository (which formally is a specific data structure storing versioning information).\nAlthough there are many ways to start a new repository, GitHub (or any other cloud solutions, such as GitLab) provide among the most convenient way of starting a repository.\n\n\n\n\n\nGitHub is a company that hosts git repositories online and provides several collaboration features (among which forking). GitHub fosters a great user community and has built a nice web interface to git, also adding great visualization/rendering capacities of your data. It is like a coding social platform for nerds ALL\nA few highlights of what you can do with GitHub:\n\nPublish and share your work (like the website we are using today!!)\nVisualize your files and modifications (highlight changes in your code; can render files such as csv, png, …)\nManage projects and tasks (GitHub issues)\nUses the markdown syntax everywhere (like Rmarkdown, quarto, and Jupyter notebooks!)\n\n\n\nThis is the default landing page when you log into your account. It provides a mix of the most recent resources and activities of your and your collaborators’ actions, as well as some resources relevant to your work. The dashboard therefore changes on a regular basis. Once logged in, you can access your dashboard at https://github.com\n\n\n\n\nThis page can be reached using the following URL: https://github.com/username. For my user (brunj7) it would be: https://github.com/brunj7. It is a great space for you to provide some information about yourself and the main repositories you are working on. It also lists the GitHub Organizations you are part of. But more importantly, Users own repositories to host and share their code. You can list repositories from a User by clicking on the repositories tab in the main GitHub menu bar at the top.\n\n\n\n\nWe will talk more about GitHub Organizations later. In a nutshell, organizations are like groups or teams that users can be members of. Like Users, Organizations can have a landing page and own repositories. However, they add several perks in terms of user management. Similarly to Users, you can access repositories from an Organization by clicking on the repositories tab in the main GitHub menu bar at the top. You can access an organization’s page similarly to a user: https://github.com/organization-name; e.g. https://github.com/UCSB-Library-Research-Data-Services\n\n\n\n\n\n\n\n\nThis screen shows the copy of a repository stored on GitHub, with its list of files, when the files and directories were last modified, and some information on who made the most recent changes.\n\n\n\n\n\nIf we drill into the “commits” for the repository, we can see the history of changes made to all of the files. Looks like kellijohnson and seananderson were fixing things in June and July:\n\n\n\n\n\nAnd finally, if we drill into the changes made on June 13, we can see exactly what was changed in each file:\n\n\n\n\n\nTracking these changes, and seeing how they relate to released versions of software and files is exactly what Git and GitHub are good for. We will show how they can really be effective for tracking versions of scientific code, figures, and manuscripts to accomplish a reproducible workflow.\n\n\n\n\n\nGitHub.com / your dashboard (if logged in): https://github.com\nA user account: https://github.com/brunj7\nAn organization account: https://github.com/UCSB-Library-Research-Data-Services\nA repository under an user: https://github.com/brunj7/favorite-desserts\nA repository under an organization: https://github.com/UCSB-Library-Research-Data-Services/github-4everyone\n\n\n\n\nBraga PHP, Hébert K, Hudgins EJ, Scott ER, Edwards BPM, Sánchez Reyes LL, et al. Not just for programmers: How GitHub can accelerate collaborative and reproducible research in ecology and evolution. Methods in Ecology and Evolution. 2023;14: 1364–1380. doi:10.1111/2041-210X.14108\n\n\n\nSome parts of this content were adapted from NCEAS Reproducible Research Techniques for Synthesis & Collaborative Coding with GitHub. LNO Scientific Computing Team."
  },
  {
    "objectID": "github_intro.html#the-problem-with-save_as",
    "href": "github_intro.html#the-problem-with-save_as",
    "title": "git and GitHub",
    "section": "",
    "text": "Every file in the scientific process changes. Manuscripts are edited. Figures get revised. Code gets fixed when problems are discovered. Data files get combined together, then errors are fixed, and then they are split and combined again. In the course of a single analysis, one can expect thousands of changes to files. And yet, all we use to track this are simplistic filenames. You might think there is a better way, and you’d be right: version control.\nVersion control systems help you track all of the changes to your files, without the spaghetti mess that ensues from simple file renaming. In other words, version control is a system that helps you to manage the different versions of your files in an organized manner. It will help you to never have to duplicate files using save as as a way to keep different versions of a file (see below). Version control helps you to develop a timeline of snapshots containing the different versions of a file. At any point in time, you will be able to roll back to a specific version. Bonus: you can add a short description (commit message) to remember what each specific version is about.\nWhat is the difference between git and GitHub?\n\ngit: is a version control software used to track files in a folder (a repository)\n\ngit creates a timeline or history of your files\n\nGitHub: is a code repository in the cloud that enables users to store their git repositories and share them with others. Github also adds many features to manage projects and document your work."
  },
  {
    "objectID": "github_intro.html#git",
    "href": "github_intro.html#git",
    "title": "git and GitHub",
    "section": "",
    "text": "This section focuses on the code versioning system called Git. Note that there are others, such as Mercurial or svn for example.\nGit is a free and open source distributed version control system. It has many functionalities and was originally geared towards software development and production environment. In fact, Git was initially designed and developed in 2005 by Linux kernel developers (including Linus Torvalds) to track the development of the Linux kernel. Here is a fun video of Linus Torvalds touting Git to Google.\nHow does it work?\nGit can be enabled on a specific folder/directory on your file system to version files within that directory (including sub-directories). In git (and other version control systems) terms, this “tracked folder” is called a repository (which formally is a specific data structure storing versioning information).\nWhat git is not:\n\nGit is not a backup per se\nGit is not good at versioning large files (there are workarounds) =&gt; not meant for large data\n\n\n\n\n\n\n\nFun fact\n\n\n\n\n\nGit was initially designed and developed by Linux kernel developers (including Linus Torvalds) to track the development of the Linux kernel in 2005. Here is a fun video of Linus Torvalds touting Git to Google engineers.\n\n\n\n\n\nGit can be enabled on a specific folder/directory on your file system to version files within that directory (including sub-directories). In git (and other version control systems) terms, this “tracked folder” is called a repository (which formally is a specific data structure storing versioning information).\nAlthough there are many ways to start a new repository, GitHub (or any other cloud solutions, such as GitLab) provide among the most convenient way of starting a repository."
  },
  {
    "objectID": "github_intro.html#github",
    "href": "github_intro.html#github",
    "title": "git and GitHub",
    "section": "",
    "text": "GitHub is a company that hosts git repositories online and provides several collaboration features (among which forking). GitHub fosters a great user community and has built a nice web interface to git, also adding great visualization/rendering capacities of your data. It is like a coding social platform for nerds ALL\nA few highlights of what you can do with GitHub:\n\nPublish and share your work (like the website we are using today!!)\nVisualize your files and modifications (highlight changes in your code; can render files such as csv, png, …)\nManage projects and tasks (GitHub issues)\nUses the markdown syntax everywhere (like Rmarkdown, quarto, and Jupyter notebooks!)\n\n\n\nThis is the default landing page when you log into your account. It provides a mix of the most recent resources and activities of your and your collaborators’ actions, as well as some resources relevant to your work. The dashboard therefore changes on a regular basis. Once logged in, you can access your dashboard at https://github.com\n\n\n\n\nThis page can be reached using the following URL: https://github.com/username. For my user (brunj7) it would be: https://github.com/brunj7. It is a great space for you to provide some information about yourself and the main repositories you are working on. It also lists the GitHub Organizations you are part of. But more importantly, Users own repositories to host and share their code. You can list repositories from a User by clicking on the repositories tab in the main GitHub menu bar at the top.\n\n\n\n\nWe will talk more about GitHub Organizations later. In a nutshell, organizations are like groups or teams that users can be members of. Like Users, Organizations can have a landing page and own repositories. However, they add several perks in terms of user management. Similarly to Users, you can access repositories from an Organization by clicking on the repositories tab in the main GitHub menu bar at the top. You can access an organization’s page similarly to a user: https://github.com/organization-name; e.g. https://github.com/UCSB-Library-Research-Data-Services\n\n\n\n\n\n\n\n\nThis screen shows the copy of a repository stored on GitHub, with its list of files, when the files and directories were last modified, and some information on who made the most recent changes.\n\n\n\n\n\nIf we drill into the “commits” for the repository, we can see the history of changes made to all of the files. Looks like kellijohnson and seananderson were fixing things in June and July:\n\n\n\n\n\nAnd finally, if we drill into the changes made on June 13, we can see exactly what was changed in each file:\n\n\n\n\n\nTracking these changes, and seeing how they relate to released versions of software and files is exactly what Git and GitHub are good for. We will show how they can really be effective for tracking versions of scientific code, figures, and manuscripts to accomplish a reproducible workflow."
  },
  {
    "objectID": "github_intro.html#recap",
    "href": "github_intro.html#recap",
    "title": "git and GitHub",
    "section": "",
    "text": "GitHub.com / your dashboard (if logged in): https://github.com\nA user account: https://github.com/brunj7\nAn organization account: https://github.com/UCSB-Library-Research-Data-Services\nA repository under an user: https://github.com/brunj7/favorite-desserts\nA repository under an organization: https://github.com/UCSB-Library-Research-Data-Services/github-4everyone"
  },
  {
    "objectID": "github_intro.html#recommended-reading",
    "href": "github_intro.html#recommended-reading",
    "title": "git and GitHub",
    "section": "",
    "text": "Braga PHP, Hébert K, Hudgins EJ, Scott ER, Edwards BPM, Sánchez Reyes LL, et al. Not just for programmers: How GitHub can accelerate collaborative and reproducible research in ecology and evolution. Methods in Ecology and Evolution. 2023;14: 1364–1380. doi:10.1111/2041-210X.14108"
  },
  {
    "objectID": "github_intro.html#aknowledgements",
    "href": "github_intro.html#aknowledgements",
    "title": "git and GitHub",
    "section": "",
    "text": "Some parts of this content were adapted from NCEAS Reproducible Research Techniques for Synthesis & Collaborative Coding with GitHub. LNO Scientific Computing Team."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About RDS",
    "section": "",
    "text": "Research Data Services (RDS) helps UCSB researchers manage and preserve their research data through:\n\nConsultations\nLong-term engagements\nInstructional workshops.\n\nOur team offers support across the research data lifecycle, from pre-project planning to post-project archival, connecting researchers with both locally- and externally-provided curation services. Our goal is to ensure that all research data is well-described, FAIR (Findable, Accessible, Interoperable, Reusable), and sustainably preservable, and that researchers receive scholarly credit for sharing and publishing data.\nContact us if you have any questions: rds@library.ucsb.edu"
  }
]